package pasa.cbentley.core.src4.event;

import pasa.cbentley.core.src4.ctx.ICtx;
import pasa.cbentley.core.src4.ctx.UCtx;
import pasa.cbentley.core.src4.ex.UCtxException;
import pasa.cbentley.core.src4.interfaces.ITechThread;
import pasa.cbentley.core.src4.logging.Dctx;
import pasa.cbentley.core.src4.logging.IStringable;
import pasa.cbentley.core.src4.utils.BitUtils;

/**
 * Event constrained to build the appli. It is not used
 * java.util.EventObject in Java
 * <br>
 * Here we add eventID as the interface identification.
 * <br>
 * Flags give fine grained control. Allows warning for unprocessed event. (usually a bug)
 * Parameter object allows for cleaner code. Instead of retrieving data from source, use the param object.
 * <br>
 * Most event generate a result on screen, thus initiate a repaint request. The event may have been generated
 * in the UserEventThread or in a business thread.
 * <br> By default, event are deemd in the user thread
 * But then again such business methods should be called serially
 * <br>
 * <br>
 * <b>Things to remember of events</b>
 * <li> Don't raise event from within events
 * <li> Centralized event processor {@link EveChannel}
 * <li> encapsulate event code. 
 * <ol>
 * <li>see data. 
 * <li>do work. 
 * <li>job done.
 * </ol>
 * <br>
 * <br>
 * Producers of Event
 * <li> Each producer uses an ID to identify itself.
 * <br>
 * <br>
 * 
 * @author Charles Bentley
 *
 */
public class BusEvent implements IStringable, ITechThread {

   /**
    * An event can be parsed by several {@link IEventConsumer} but not acted upon.
    * <br>
    * This relationship of first aggregated with a single flag.
    * <br>
    * When this flag is set, at least {@link IEventConsumer} acknowledged the {@link BusEvent}
    * as consumed.
    */
   public static final int FLAG_1_ACTED      = 1;

   /**
    * Flag an event not generated by a direct user interaction
    */
   public static final int FLAG_2_BUSINESS   = 2;

   /**
    * Set when the MEvent is generated in the user event thread.
    */
   public static final int FLAG_3_USER_EVENT = 4;

   /**
    * The Context owner of the Bus. Help detects errors.
    * 
    */
   private IEventBus       busOwner;

   private int             eventID;

   private int             flags;

   /**
    * Convenience param
    */
   private int             param1;

   /**
    * Convenience param
    */
   private int             param2;

   private Object          paramO1;

   private Object          paramO2;

   private Object          producer;

   private EventParam      param;

   private int             producerID;

   private UCtx            uc;

   /**
    * 
    * @param uc
    * @param contextOwner
    * @param pid
    * @param eid
    */
   public BusEvent(UCtx uc, IEventBus busOwner, int pid, int eid) {
      this.uc = uc;
      this.busOwner = busOwner;
      this.producerID = pid;
      this.eventID = eid;
   }

   public void checkSanity(ICtx ctxOwner, int pid, int eid) {
      if (ctxOwner != busOwner.getCtxOwner() || pid != producerID || eid != eventID) {
         String message = ctxOwner.getClass().getName() + " " + pid + " " + eid;
         throw new UCtxException(UCtxException.EVENT_MATCH_EX, message);
      }
   }

   public void flagActed() {
      setFlag(FLAG_1_ACTED, true);
   }

   public int getEventID() {
      return eventID;
   }

   public int getParam1() {
      return param1;
   }

   public int getParam2() {
      return param2;
   }

   public Object getParamO1() {
      return paramO1;
   }

   public void clearForReUse() {
      
   }
   
   public Object getParamO2() {
      return paramO2;
   }

   public Object getProducer() {
      return producer;
   }

   public int getPID() {
      return producerID;
   }

   public int getProducerID() {
      return producerID;
   }

   public boolean hasFlag(int flag) {
      return BitUtils.hasFlag(flags, flag);
   }

   public void setActed() {
      setFlag(FLAG_1_ACTED, true);
   }

   public void setEventID(int eventID) {
      this.eventID = eventID;
   }

   /**
    * Set flags for the event. Defined by each event type
    * @param flag
    * @param v
    */
   public void setFlag(int flag, boolean v) {
      flags = BitUtils.setFlag(flags, flag, v);
   }

   public void setParam1(int param1) {
      this.param1 = param1;
   }

   public void setParam2(int param2) {
      this.param2 = param2;
   }

   /**
    * Send this event on its ubs
    */
   public void putOnBus() {
      this.busOwner.putOnBus(this);
   }

   /**
    * Sends this event on its busowner with thread {@link ITechThread#THREAD_MODE_1_MAIN_NOW} 
    */
   public void putOnBusMainNow() {
      this.busOwner.putOnBus(this, THREAD_MODE_1_MAIN_NOW);
   }
   /**
    * Sends this event on its busowner with thread {@link ITechThread#THREAD_MODE_2_MAIN_LATER} 
    */
   public void putOnBusMainLater() {
      this.busOwner.putOnBus(this, THREAD_MODE_2_MAIN_LATER);
   }
   /**
    * Sends this event on its busowner with thread {@link ITechThread#THREAD_MODE_3_WORKER} 
    */
   public void putOnBusWorker() {
      this.busOwner.putOnBus(this, THREAD_MODE_3_WORKER);
   }
   /**
    * Sends this event on its busowner with a dynamic thread type
    * <li> {@link ITechThread#THREAD_MODE_0_POST_NOW} 
    * <li> {@link ITechThread#THREAD_MODE_1_MAIN_NOW} 
    * <li> {@link ITechThread#THREAD_MODE_2_MAIN_LATER} 
    * <li> {@link ITechThread#THREAD_MODE_3_WORKER} 
    */
   public void putOnBus( int threadType) {
      this.busOwner.putOnBus(this, threadType);
   }

   public void setParamO1(Object paramO1) {
      this.paramO1 = paramO1;
   }

   public void setParamO2(Object paramO2) {
      this.paramO2 = paramO2;
   }

   public void setProducer(Object producer) {
      this.producer = producer;
   }

   public void setProducerID(int producerID) {
      this.producerID = producerID;
   }

   public EventParam createParam() {
      param = new EventParam(uc, this);
      return param;
   }

   public void setUserEvent() {
      setFlag(FLAG_3_USER_EVENT, true);
   }

   //#mdebug
   public String toString() {
      return Dctx.toString(this);
   }

   public void toString(Dctx dc) {
      dc.root(this, "BusEvent");
      dc.nlLvlOneLine(busOwner.getCtxOwner());
      toStringPrivate(dc);
      dc.nl();
      dc.nlLvlObject("ParamObject1", paramO1);
      dc.nlLvlObject("ParamObject2", paramO2);
      dc.nlLvlObject("Producer", producer);
   }

   public String toString1Line() {
      return Dctx.toString1Line(this);
   }

   private void toStringPrivate(Dctx dc) {
      dc.appendVarWithSpace("PID", getProducerID() + ":" + busOwner.getCtxOwner().toStringProducerID(producerID));
      dc.appendVarWithSpace("EID", getEventID() + ":" + busOwner.getCtxOwner().toStringEventID(producerID, getEventID()));
      dc.appendVarWithSpace("acted", hasFlag(FLAG_1_ACTED));
      dc.appendVarWithSpace("user", hasFlag(FLAG_3_USER_EVENT));
      dc.appendVarWithSpace("param1", getParam1());
      dc.appendVarWithSpace("param2", getParam2());
   }

   public void toString1Line(Dctx dc) {
      dc.root1Line(this, "BusEvent");
      dc.nlLvlOneLine(busOwner.getCtxOwner());
      toStringPrivate(dc);
      if (producer != null) {
         dc.append("by " + producer.getClass().getName());
      }
   }

   public UCtx toStringGetUCtx() {
      return uc;
   }
   //#enddebug

}
